// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using UnityEngine;
	using Coherence.Toolkit;
	using Coherence.Toolkit.Bindings;
	using Coherence.Entity;
	using Coherence.ProtocolDef;
	using Coherence.Brook;
	using Coherence.Toolkit.Bindings.ValueBindings;
	using Coherence.Toolkit.Bindings.TransformBindings;
	using Coherence.Connection;
	using Coherence.Log;
	using Logger = Coherence.Log.Logger;
	using UnityEngine.Scripting;

	public class Binding_3be44a6dcf9a3d940bf4c430edc35dfc_9560c926_37bf_43e9_8ac8_d1c07f4f7234 : ReferenceBinding
	{
		private NetworkScript CastedUnityComponent;		

		protected override void OnBindingCloned()
		{
			CastedUnityComponent = (NetworkScript)UnityComponent;
		}
		public override string CoherenceComponentName => "NetworkSync_NetworkScript_1663630596374640718";

		public override uint FieldMask => 0b00000000000000000000000000000001;

		public override SerializeEntityID Value
		{
			get => (SerializeEntityID)coherenceSync.MonoBridge.UnityObjectToEntityId(CastedUnityComponent.gameManager);
			set => CastedUnityComponent.gameManager = coherenceSync.MonoBridge.EntityIdToGameObject(value);
		}

		protected override SerializeEntityID ReadComponentData(ICoherenceComponentData coherenceComponent)
		{
			var update = (NetworkSync_NetworkScript_1663630596374640718)coherenceComponent;
			return update.gameManager;
		}
		
		public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent)
		{
			var update = (NetworkSync_NetworkScript_1663630596374640718)coherenceComponent;
			update.gameManager = Value;
			return update;
		}

		public override ICoherenceComponentData CreateComponentData()
		{
			return new NetworkSync_NetworkScript_1663630596374640718();
		}
	}


	[Preserve]
	[AddComponentMenu("coherence/Baked/Baked 'NetworkSync' (auto assigned)")]
	[RequireComponent(typeof(CoherenceSync))]
	public class CoherenceSyncNetworkSync : CoherenceSyncBaked
	{
		private CoherenceSync coherenceSync;
		private Logger logger;

		// Cached targets for commands

		private IClient client;
		private CoherenceMonoBridge monoBridge => coherenceSync.MonoBridge;

		protected void Awake()
		{
			coherenceSync = GetComponent<CoherenceSync>();
			coherenceSync.usingReflection = false;

			logger = coherenceSync.logger.With<CoherenceSyncNetworkSync>();
			if (coherenceSync.TryGetBindingByGuid("9560c926-37bf-43e9-8ac8-d1c07f4f7234", "gameManager", out Binding InternalNetworkSync_NetworkScript_1663630596374640718_NetworkSync_NetworkScript_1663630596374640718_gameManager))
			{
				var clone = new Binding_3be44a6dcf9a3d940bf4c430edc35dfc_9560c926_37bf_43e9_8ac8_d1c07f4f7234();
				InternalNetworkSync_NetworkScript_1663630596374640718_NetworkSync_NetworkScript_1663630596374640718_gameManager.CloneTo(clone);
				coherenceSync.Bindings[coherenceSync.Bindings.IndexOf(InternalNetworkSync_NetworkScript_1663630596374640718_NetworkSync_NetworkScript_1663630596374640718_gameManager)] = clone;
			}
			else
			{
				logger.Error("Couldn't find binding (NetworkScript).gameManager");
			}
		}

		public override List<ICoherenceComponentData> CreateEntity()
		{
			if (coherenceSync.UsesLODsAtRuntime && (Archetypes.IndexForName.TryGetValue(coherenceSync.Archetype.ArchetypeName, out int archetypeIndex)))
			{
				var components = new List<ICoherenceComponentData>()
				{
					new ArchetypeComponent
					{
						index = archetypeIndex
					}
				};

				return components;
			}
			else
			{
				logger.Warning($"Unable to find archetype {coherenceSync.Archetype.ArchetypeName} in dictionary. Please, bake manually (coherence > Bake)");
			}

			return null;
		}

		public override void Initialize(CoherenceSync sync, IClient client)
		{
			if (coherenceSync == null)
			{
				coherenceSync = sync;
			}
			this.client = client;
		}

		public override void ReceiveCommand(IEntityCommand command)
		{
			switch(command)
			{
				default:
					logger.Warning($"[CoherenceSyncNetworkSync] Unhandled command: {command.GetType()}.");
					break;
			}
		}
	}
}
